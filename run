#!/usr/bin/env python3
"""Convenience launcher for installing deps and running the bots."""
import subprocess
import sys
from pathlib import Path

 gn711x-codex/retrieve-memory-from-coding-projects
# Ensure pip is available
def ensure_pip() -> None:
    """Make sure the running Python has pip available."""
    try:
        import pip  # noqa: F401
        return
    except ImportError:
        pass

    try:
        # Some Python distributions ship without pip. Attempt to bootstrap it
        # using the ensurepip module.
        print("Bootstrapping pip...")
        subprocess.check_call([sys.executable, "-m", "ensurepip", "--upgrade"])
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "pip"])
    except Exception as e:
        print(f"Failed to bootstrap pip: {e}")
        sys.exit(1)

ensure_pip()

=======
main
BASE = Path(__file__).resolve().parent

ALPACA_REQS = BASE / "money" / "alpaca_bot" / "requirements.txt"
ROBINHOOD_REQS = BASE / "money" / "robinhood_bot" / "requirements.txt"
MASTER = BASE / "money" / "master.py"

 gn711x-codex/retrieve-memory-from-coding-projects
def main() -> None:
    commands = [
        [sys.executable, "-m", "pip", "install", "-r", str(ALPACA_REQS)],
        [sys.executable, "-m", "pip", "install", "-r", str(ROBINHOOD_REQS)],
        [sys.executable, str(MASTER)],
    ]

    for cmd in commands:
        print(f"\U0001F4E6 Running: {' '.join(cmd)}")
        try:
            subprocess.check_call(cmd)
        except subprocess.CalledProcessError as e:
            print(f"Command failed: {' '.join(cmd)}\n{e}")
            sys.exit(e.returncode)


if __name__ == "__main__":
    main()
=======
commands = [
    [sys.executable, "-m", "pip", "install", "-r", str(ALPACA_REQS)],
    [sys.executable, "-m", "pip", "install", "-r", str(ROBINHOOD_REQS)],
    [sys.executable, str(MASTER)],
]

for cmd in commands:
    try:
        subprocess.check_call(cmd)
    except subprocess.CalledProcessError as e:
        print(f"Command failed: {' '.join(cmd)}\n{e}")
        sys.exit(e.returncode)
 main
